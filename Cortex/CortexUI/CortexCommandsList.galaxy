// Cortex Forge Extensions
// By Xethyr (407)
//
// Copyright (C) 2013
//
// Cortex Engine by Motive
// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2011 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.


struct ui_command
{
	string cmd; //COMMAND NAME e.g. @spawn
	string stx; //SYNTAX e.g. @spawn [unit name] [@hostile/@neutral] [amount]
	string nfo; //INFO e.g. creates a unit!
	string use; //EXAMPLE USAGE e.g. @spawn 5 marine @hostile
};

ui_command[10][70] libcrtx_ui_commands_entry;

string libcrtx_ui_commands_category;


void libcrtx_ui_commands_entries_init()
{
	int i;
	int j;
	
	libcrtx_ui_commands_category = "admin alias permissions camera doodad general region unit";
	
	//1 - admin commands
	j = 1;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!ban";
	libcrtx_ui_commands_entry[j][i].stx = "!ban (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Kicks a player and removes their units from the game.";
	libcrtx_ui_commands_entry[j][i].use = "!ban red";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!disable";
	libcrtx_ui_commands_entry[j][i].stx = "!disable (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Prevents a player from talking/using any commands";
	libcrtx_ui_commands_entry[j][i].use = "!disable blue";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!enable";
	libcrtx_ui_commands_entry[j][i].stx = "!enable (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Allows a player to talk/use commands.";
	libcrtx_ui_commands_entry[j][i].use = "!enable green";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!promote";
	libcrtx_ui_commands_entry[j][i].stx = "!promote (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Promotes a player to moderator status.";
	libcrtx_ui_commands_entry[j][i].use = "!promote yellow";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!demote";
	libcrtx_ui_commands_entry[j][i].stx = "!demote (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Demotes a moderator back to user status.";
	libcrtx_ui_commands_entry[j][i].use = "!demote purple";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!remove";
	libcrtx_ui_commands_entry[j][i].stx = "!remove (player color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes units spawned by the selected player";
	libcrtx_ui_commands_entry[j][i].use = "!remove red";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!seeall";
	libcrtx_ui_commands_entry[j][i].stx = "!seeall";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on or off vision of the entire map";
	libcrtx_ui_commands_entry[j][i].use = "!seeall";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!smarthostile";
	libcrtx_ui_commands_entry[j][i].stx = "!smarthostile";
	libcrtx_ui_commands_entry[j][i].nfo = "Enables the use of smarthostile.";
	libcrtx_ui_commands_entry[j][i].use = "!smarthostile";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!light";
	libcrtx_ui_commands_entry[j][i].stx = "!light [light name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the lighting on the map";
	libcrtx_ui_commands_entry[j][i].use = "!light ArchonPortrait | !light BelShir";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!creepspeed";
	libcrtx_ui_commands_entry[j][i].stx = "!creepspeed [speed]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the rate of creep spread";
	libcrtx_ui_commands_entry[j][i].use = "!creepspeed 50.5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!trolls";
	libcrtx_ui_commands_entry[j][i].stx = "trolls {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Notifies the host of potentially dangerous units (high damage, lag etc.)";
	libcrtx_ui_commands_entry[j][i].use = "!trolls on";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!log";
	libcrtx_ui_commands_entry[j][i].stx = "!log";
	libcrtx_ui_commands_entry[j][i].nfo = "Shows the last 25 commands.";
	libcrtx_ui_commands_entry[j][i].use = "!log";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!secure";
	libcrtx_ui_commands_entry[j][i].stx = "!secure {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Enables/disables the use of replaceunit and replaceeffect";
	libcrtx_ui_commands_entry[j][i].use = "!secure off";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!fog";
	libcrtx_ui_commands_entry[j][i].stx = "!fog [parameter] [value]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the map fog settings";
	libcrtx_ui_commands_entry[j][i].use = "!fog color 250 50 0 | !fog falloff 5 (type !fog to list parameters)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!setting";
	libcrtx_ui_commands_entry[j][i].stx = "!setting [setting] [value]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes default map settings, like spawn rate or max scale for the @scale command";
	libcrtx_ui_commands_entry[j][i].use = "!setting maxspawnrate 100 (Typing \"!setting\" lists the settings)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!fruit";
	libcrtx_ui_commands_entry[j][i].stx = "!fruit [amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Let there be fruit";
	libcrtx_ui_commands_entry[j][i].use = "!fruit 9001";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!xml";
	libcrtx_ui_commands_entry[j][i].stx = "!xml on||off";
	libcrtx_ui_commands_entry[j][i].nfo = "Allows or prevents xml styling to be used";
	libcrtx_ui_commands_entry[j][i].use = "!xml on";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!soundtrack";
	libcrtx_ui_commands_entry[j][i].stx = "!soundtrack [soundtrack name] [\"ambience\"|\"music\"]";
	libcrtx_ui_commands_entry[j][i].nfo = "Plays a soundtrack for all players. Ambience is background sound. Music is played over ambience";
	libcrtx_ui_commands_entry[j][i].use = "!soundtrack ";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!soundtrack stop";
	libcrtx_ui_commands_entry[j][i].stx = "!soundtrack stop [\"ambience\"|\"music\"]";
	libcrtx_ui_commands_entry[j][i].nfo = "Stops a played soundtrack (not specifying ambience or music stops all soundtracks)";
	libcrtx_ui_commands_entry[j][i].use = "!soundtrack stop";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!weather";
	libcrtx_ui_commands_entry[j][i].stx = "!weather rain|snow|hail|fog|mist|sandstorm|sun [amount (default: 25)] [HDR] #[region]";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates weather of type specified. HDR is intensity. Specify region with #___";
	libcrtx_ui_commands_entry[j][i].use = "!weather rain  |  !weather snow 65 1.2 #region";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "!weather off";
	libcrtx_ui_commands_entry[j][i].stx = "!weather off #[region]";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns weather off. Specify region if only want to turn off weather there";
	libcrtx_ui_commands_entry[j][i].use = "!weather off  |  !weather off #region";

	//2 - alias commands
	j = 2;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "alias create";
	libcrtx_ui_commands_entry[j][i].stx = "alias create [string aliasname] command 1; command 2; command 3;...";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates an alias to represent a command chains (semicolons between commands)";
	libcrtx_ui_commands_entry[j][i].use = "alias create sp @spawn (typing \"sp\" becomes \"@spawn\")";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "alias remove";
	libcrtx_ui_commands_entry[j][i].stx = "alias remove (alias name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Deletes a selected alias";
	libcrtx_ui_commands_entry[j][i].use = "alias remove sp";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "alias removeall";
	libcrtx_ui_commands_entry[j][i].stx = "alias removeall";
	libcrtx_ui_commands_entry[j][i].nfo = "Deletes all of your aliases";
	libcrtx_ui_commands_entry[j][i].use = "alias removeall";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "alias list";	
	libcrtx_ui_commands_entry[j][i].stx = "alias list";
	libcrtx_ui_commands_entry[j][i].nfo = "Brings up your aliases into a list (Does not reveal what each one does)";
	libcrtx_ui_commands_entry[j][i].use = "alias list";

	//3 - blacklist commands
	j = 3;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "blacklist add";
	libcrtx_ui_commands_entry[j][i].stx = "blacklist add [color player]";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds a player to your blacklist (when you host, this player will be disabled at start)";
	libcrtx_ui_commands_entry[j][i].use = "blacklist add red";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "blacklist add -h";
	libcrtx_ui_commands_entry[j][i].stx = "blacklist add -h [string player-handle]";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds a player to your blacklist, but uses their handle (their id) rather than color";
	libcrtx_ui_commands_entry[j][i].use = "blacklist add -h 1-S2-1-2459597";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "blacklist remove";
	libcrtx_ui_commands_entry[j][i].stx = "blacklist remove [int id]";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes a player from your blacklist, based on their list ID";
	libcrtx_ui_commands_entry[j][i].use = "blacklist remove 2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "blacklist list";
	libcrtx_ui_commands_entry[j][i].stx = "blacklist list";
	libcrtx_ui_commands_entry[j][i].nfo = "Shows a list of players on your blacklist";
	libcrtx_ui_commands_entry[j][i].use = "blacklist list";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "permissions";
	libcrtx_ui_commands_entry[j][i].stx = "permissions [color] [string command] {allow||ban||remove} {global}";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets command permissions for player. Allows or disallows commands.";
	libcrtx_ui_commands_entry[j][i].use = "permissions red @spawn ban  |  permissions red replacemodel allow global";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "permissions [color] [command] allow";
	libcrtx_ui_commands_entry[j][i].stx = "permissions [color] [command] allow {global}";
	libcrtx_ui_commands_entry[j][i].nfo = "Allow the command for [color] to override requirements like !secure";
	libcrtx_ui_commands_entry[j][i].use = "permissions red replaceunit allow  |  permissions red gamesetup allow global";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "permissions [color] [command] ban";
	libcrtx_ui_commands_entry[j][i].stx = "permissions [color] [command] ban {global}";
	libcrtx_ui_commands_entry[j][i].nfo = "Bans the command from being used by [color] player";
	libcrtx_ui_commands_entry[j][i].use = "permissions red @spawn ban  |  permissions red replaceunit ban global";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "permissions [color] [command] remove";
	libcrtx_ui_commands_entry[j][i].stx = "permissions [color] [command] remove";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes all permissions for command for player";
	libcrtx_ui_commands_entry[j][i].use = "permissions red @spawn remove";
	
	//4 - camera commands
	j = 4;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera ______";
	libcrtx_ui_commands_entry[j][i].stx = "camera [preset property] [fixed value]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the camera setting to the value";
	libcrtx_ui_commands_entry[j][i].use = "camera roll 69 (\"camera properties\" to list the properties)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera reset";
	libcrtx_ui_commands_entry[j][i].stx = "camera reset";
	libcrtx_ui_commands_entry[j][i].nfo = "Resets camera to default settings and view";
	libcrtx_ui_commands_entry[j][i].use = "camera reset";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera create";
	libcrtx_ui_commands_entry[j][i].stx = "camera create [string name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a camera with your current settings and view";
	libcrtx_ui_commands_entry[j][i].use = "camera create A";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera remove";
	libcrtx_ui_commands_entry[j][i].stx = "camera remove [string name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Deletes the specified camera (case sensitive name)";
	libcrtx_ui_commands_entry[j][i].use = "camera remove A";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera removeall";
	libcrtx_ui_commands_entry[j][i].stx = "camera removeall";
	libcrtx_ui_commands_entry[j][i].nfo = "Deletes all your cameras";
	libcrtx_ui_commands_entry[j][i].use = "camera removeall";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera list";
	libcrtx_ui_commands_entry[j][i].stx = "camera list";
	libcrtx_ui_commands_entry[j][i].nfo = "Shows a list of cameras you have created";
	libcrtx_ui_commands_entry[j][i].use = "camera list";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "camera view";
	libcrtx_ui_commands_entry[j][i].stx = "camera view [string name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Views the specified camera";
	libcrtx_ui_commands_entry[j][i].use = "camera view A";
	
	//5 - doodad commands
	j = 5;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_doodad";
	libcrtx_ui_commands_entry[j][i].stx = "_doodad [string model-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on the \"doodad brush\": Allows placing models on map via mouse-click";
	libcrtx_ui_commands_entry[j][i].use = "_doodad haventree | _doodad marine (Type \"_doodad\" to turn brush off)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_select";
	libcrtx_ui_commands_entry[j][i].stx = "_select";
	libcrtx_ui_commands_entry[j][i].nfo = "Toggles on or off selecting any doodad placed on map with mouse box drag";
	libcrtx_ui_commands_entry[j][i].use = "_select";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_removearea";
	libcrtx_ui_commands_entry[j][i].stx = "_removearea [fixed radius]";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes all doodads in a radius";
	libcrtx_ui_commands_entry[j][i].use = "_removearea 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_remove";
	libcrtx_ui_commands_entry[j][i].stx = "_remove";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes all doodads in your selection (from _select)";
	libcrtx_ui_commands_entry[j][i].use = "_remove";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_clearhalos";
	libcrtx_ui_commands_entry[j][i].stx = "_clearhalos [fixed radius]";
	libcrtx_ui_commands_entry[j][i].nfo = "Clears the \"halos\" formed by _select (moderator+ command)";
	libcrtx_ui_commands_entry[j][i].use = "_clearhalos 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_destroy";
	libcrtx_ui_commands_entry[j][i].stx = "_destroy [fixed radius]";
	libcrtx_ui_commands_entry[j][i].nfo = "Destroys all actors in an area, can remove stains (moderator+ command. USE WITH CAUTION)";
	libcrtx_ui_commands_entry[j][i].use = "_destroy 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_tint";
	libcrtx_ui_commands_entry[j][i].stx = "_tint [fixed red] [fixed green] [fixed blue] [fixed opacity] [fixed HDR]";
	libcrtx_ui_commands_entry[j][i].nfo = "Tints the selection or the doodad-brush model";
	libcrtx_ui_commands_entry[j][i].use = "_tint 250 50 0 .5 2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_scale";
	libcrtx_ui_commands_entry[j][i].stx = "_scale [fixed x] [fixed y] [fixed z] ";
	libcrtx_ui_commands_entry[j][i].nfo = "Scales the selection or the doodad-brush model (x, y 2-d plane | z - height)";
	libcrtx_ui_commands_entry[j][i].use = "_scale 2 2.2 5.7";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_face";
	libcrtx_ui_commands_entry[j][i].stx = "_face [fixed angle]";
	libcrtx_ui_commands_entry[j][i].nfo = "Makes the selection or the doodad-brush model face the angle or the spawner/mouse";
	libcrtx_ui_commands_entry[j][i].use = "_face | _face 55";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_height";
	libcrtx_ui_commands_entry[j][i].stx = "_height [fixed height]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the selection or the doodad-brush model to the height";
	libcrtx_ui_commands_entry[j][i].use = "_height 5.4";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_modelswap";
	libcrtx_ui_commands_entry[j][i].stx = "_modelswap [string model-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the selection's models to the specified model";
	libcrtx_ui_commands_entry[j][i].use = "_modelswap marine | _modelswap Haventree";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "_animspeed";
	libcrtx_ui_commands_entry[j][i].stx = "_animspeed [fixed speed]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the selection's or the doodad-brush model's animation speed";
	libcrtx_ui_commands_entry[j][i].use = "_animspeed .01 | _animspeed 5";

	
	//6 - general commands
	j = 6;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "info";
	libcrtx_ui_commands_entry[j][i].stx = "info";
	libcrtx_ui_commands_entry[j][i].nfo = "Displays information on current Cortex version";
	libcrtx_ui_commands_entry[j][i].use = "info";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "minerals";
	libcrtx_ui_commands_entry[j][i].stx = "minerals [int amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives yourself minerals";
	libcrtx_ui_commands_entry[j][i].use = "minerals 9001";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "gas";
	libcrtx_ui_commands_entry[j][i].stx = "gas [int amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives yourself gas";
	libcrtx_ui_commands_entry[j][i].use = "gas 9001";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "commands";
	libcrtx_ui_commands_entry[j][i].stx = "commands";
	libcrtx_ui_commands_entry[j][i].nfo = "Lists the available commands";
	libcrtx_ui_commands_entry[j][i].use = "commands";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "colors";
	libcrtx_ui_commands_entry[j][i].stx = "colors";
	libcrtx_ui_commands_entry[j][i].nfo = "Displays player colors and name (first on list is host)";
	libcrtx_ui_commands_entry[j][i].use = "colors";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "zoom";
	libcrtx_ui_commands_entry[j][i].stx = "zoom [fixed amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the camera zoom to specified amount";
	libcrtx_ui_commands_entry[j][i].use = "zoom 69 | zoom (resets to default zoom)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "roll";
	libcrtx_ui_commands_entry[j][i].stx = "roll [int from] [int to]";
	libcrtx_ui_commands_entry[j][i].nfo = "Returns a random number between the first to the second numbers";
	libcrtx_ui_commands_entry[j][i].use = "roll 1 6 | roll 50 100";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "var";
	libcrtx_ui_commands_entry[j][i].stx = "var (variablename) = _______";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a variable to represent ____ (only use if you know what you're doing";
	libcrtx_ui_commands_entry[j][i].use = "var soldier = @spawn marine (the marine spawned can be called by @context solder)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "town";
	libcrtx_ui_commands_entry[j][i].stx = "town";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives smarthostile control over a melee-type base.";
	libcrtx_ui_commands_entry[j][i].use = "town";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "search";
	libcrtx_ui_commands_entry[j][i].stx = "search [preset catalog] [string search-term]";
	libcrtx_ui_commands_entry[j][i].nfo = "Searches through the catalog for and lists entries with the term";
	libcrtx_ui_commands_entry[j][i].use = "search actor marine | search light belshir | search model tree";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "creep";
	libcrtx_ui_commands_entry[j][i].stx = "creep [fixed radius]";
	libcrtx_ui_commands_entry[j][i].nfo = "Places creep in an area with specified radius";
	libcrtx_ui_commands_entry[j][i].use = "creep 10.2";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "upgrade";
	libcrtx_ui_commands_entry[j][i].stx = "upgrade (UpgradeName)";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds the specified upgrade to a unit/units.";
	libcrtx_ui_commands_entry[j][i].use = "upgrade CombatShield";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "ally";
	libcrtx_ui_commands_entry[j][i].stx = "ally (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Allies with a selected player. Allied players do not attack each other automatically.";
	libcrtx_ui_commands_entry[j][i].use = "ally darkgrey";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "unally";
	libcrtx_ui_commands_entry[j][i].stx = "unally (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Unallies a selected player. Unallied players will attack each other on sight.";
	libcrtx_ui_commands_entry[j][i].use = "unally red";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "control";
	libcrtx_ui_commands_entry[j][i].stx = "control (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives user control over the target player's units";
	libcrtx_ui_commands_entry[j][i].use = "control red | control white";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "uncontrol";
	libcrtx_ui_commands_entry[j][i].stx = "uncontrol (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes target player's control over your units.";
	libcrtx_ui_commands_entry[j][i].use = "uncontrol blue";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "replaceeffect";
	libcrtx_ui_commands_entry[j][i].stx = "replaceeffect (Original Effect) (New Effect)";
	libcrtx_ui_commands_entry[j][i].nfo = "Replaces an original effect with a newer effect";
	libcrtx_ui_commands_entry[j][i].use = "replaceeffect StimPack OdinNuke (using stimpack will cause an odin nuke)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "replaceunit";
	libcrtx_ui_commands_entry[j][i].stx = "replaceunit (Original Unit) (New Unit)";
	libcrtx_ui_commands_entry[j][i].nfo = "Replaces an original unit with a newer one.";
	libcrtx_ui_commands_entry[j][i].use = "replaceunit punishergrenade cow | replaceunit baneling marine";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "togglespawner";
	libcrtx_ui_commands_entry[j][i].stx = "togglespawner";
	libcrtx_ui_commands_entry[j][i].nfo = "Toggles between using the spawner unit and cursor spawning.";
	libcrtx_ui_commands_entry[j][i].use = "togglespawner";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "delay";
	libcrtx_ui_commands_entry[j][i].stx = "delay [fixed time]";
	libcrtx_ui_commands_entry[j][i].nfo = "Waits the amount of time (in seconds) before executing the next command";
	libcrtx_ui_commands_entry[j][i].use = "@spawn 5 marine; wait 5; @kill (spawns a marine, waits 5 seconds, then kills it)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "vision";
	libcrtx_ui_commands_entry[j][i].stx = "vision [color player] {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on or off vision with specified player";
	libcrtx_ui_commands_entry[j][i].use = "vision red on | vision blue off";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "repeat";
	libcrtx_ui_commands_entry[j][i].stx = "repeat [int number] command 1; command 2; ...";
	libcrtx_ui_commands_entry[j][i].nfo = "Repeats the command chain a number of times";
	libcrtx_ui_commands_entry[j][i].use = "repeat 5 @spawn 5 marine";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "ui";
	libcrtx_ui_commands_entry[j][i].stx = "ui {cortex||game} {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns game or the cortex toolbar ui on or off";
	libcrtx_ui_commands_entry[j][i].use = "ui game off | ui cortex on | ui cortex (toggles it)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "toggleanon";
	libcrtx_ui_commands_entry[j][i].stx = "toggleanon";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on or off \"Anonymous\" OOC name";
	libcrtx_ui_commands_entry[j][i].use = "toggleanon";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "gamesetup";
	libcrtx_ui_commands_entry[j][i].stx = "gamesetup {save [NAME]| load [NAME]| list | remove [NAME] | removeall [NAME]";
	libcrtx_ui_commands_entry[j][i].nfo = "Saves or loads a current game setup (all your units and buildings and their commands)";
	libcrtx_ui_commands_entry[j][i].use = "gamesetup save GAMESETUP1, gamesetup load GAMESETUP1, gamesetup list";
	
	//7 - region commands
	j = 7;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "#create";
	libcrtx_ui_commands_entry[j][i].stx = "#create (name) [fixed radius]";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a region at a location with specified radius";
	libcrtx_ui_commands_entry[j][i].use = "#create city 10.5";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#teleport";
	libcrtx_ui_commands_entry[j][i].stx = "#teleport (name1) (name2)";
	libcrtx_ui_commands_entry[j][i].nfo = "Allows the teleportation of units from one region to another";
	libcrtx_ui_commands_entry[j][i].use = "#teleport City Sewers | #teleport a b";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#remove";
	libcrtx_ui_commands_entry[j][i].stx = "#remove (name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes a selected region.";
	libcrtx_ui_commands_entry[j][i].use = "#remove city";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#removeall";
	libcrtx_ui_commands_entry[j][i].stx = "#removeall";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes all regions.";
	libcrtx_ui_commands_entry[j][i].use = "#removeall";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#list";
	libcrtx_ui_commands_entry[j][i].stx = "#list";
	libcrtx_ui_commands_entry[j][i].nfo = "Lists out existing regions.";
	libcrtx_ui_commands_entry[j][i].use = "#list";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#attach";
	libcrtx_ui_commands_entry[j][i].stx = "#attach [string name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Attaches a region to selected unit";
	libcrtx_ui_commands_entry[j][i].use = "#attach B";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "#reveal";
	libcrtx_ui_commands_entry[j][i].stx = "#reveal [string name] [color player] {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Toggles vision for the region for the specified player";
	libcrtx_ui_commands_entry[j][i].use = "#reveal city red off | #reveal city (reveals for all players)";

	
	//8 - unit commands
	j = 8;
	i = 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@spawn";
	libcrtx_ui_commands_entry[j][i].stx = "@spawn [str unit] [int count] {@hostile||@neutral} (or @spawn [int count] [str unit])";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a number of units at a location";
	libcrtx_ui_commands_entry[j][i].use = "@spawn 10 marine or @spawn marine 10 (creates 10 marines)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@context";
	libcrtx_ui_commands_entry[j][i].stx = "@context (variable name) command 1; command 2; ...";
	libcrtx_ui_commands_entry[j][i].nfo = "Makes commands targeta varible/unit group created via the \"var\" command";
	libcrtx_ui_commands_entry[j][i].use = "(var soldier = @spawn marine) @context soldier; @scale 5 (scales the earlier made marine)";
	i += 1;	
	libcrtx_ui_commands_entry[j][i].cmd = "@kill";
	libcrtx_ui_commands_entry[j][i].stx = "@kill";
	libcrtx_ui_commands_entry[j][i].nfo = "Kills the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@kill";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@remove";
	libcrtx_ui_commands_entry[j][i].stx = "@remove";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes the selected unit(s) (with no death animation)";
	libcrtx_ui_commands_entry[j][i].use = "@remove";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@give";
	libcrtx_ui_commands_entry[j][i].stx = "@give (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives selected units to another player.";
	libcrtx_ui_commands_entry[j][i].use = "@give red";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@givecolor";
	libcrtx_ui_commands_entry[j][i].stx = "@givecolor (color)";
	libcrtx_ui_commands_entry[j][i].nfo = "Gives selected units to another player, but retains color from the owner.";
	libcrtx_ui_commands_entry[j][i].use = "@givecolor blue";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@invulnerable";
	libcrtx_ui_commands_entry[j][i].stx = "@invulnerable";
	libcrtx_ui_commands_entry[j][i].nfo = "Makes the selected units/unit invulnerable";
	libcrtx_ui_commands_entry[j][i].use = "@invulnerable";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@vulnerable";
	libcrtx_ui_commands_entry[j][i].stx = "@vulnerable";
	libcrtx_ui_commands_entry[j][i].nfo = "Makes the selected unit/units vulnerable.";
	libcrtx_ui_commands_entry[j][i].use = "@vulnerable";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@pause";
	libcrtx_ui_commands_entry[j][i].stx = "@pause";
	libcrtx_ui_commands_entry[j][i].nfo = "Halts all commands ordered to units/unit.";
	libcrtx_ui_commands_entry[j][i].use = "@pause";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@move";
	libcrtx_ui_commands_entry[j][i].stx = "@move {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on or off a unit's movement";
	libcrtx_ui_commands_entry[j][i].use = "@move off | @move (defaults to move on)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@scale";
	libcrtx_ui_commands_entry[j][i].stx = "@scale [fixed X] [fixed Y] [fixed Z]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the unit scale to the specified scalars (based XY and Z axes)";
	libcrtx_ui_commands_entry[j][i].use = "@scale 3 5 2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@tint";
	libcrtx_ui_commands_entry[j][i].stx = "@tint [fixed Red] [fixed Green] [fixed Blue][fixed Opacity] [fixed HDR]";
	libcrtx_ui_commands_entry[j][i].nfo = "Tints the unit(s) to specified colors (opacity is transparency, HDR is intensity)";
	libcrtx_ui_commands_entry[j][i].use = "@tint 250.2 50 1 .5 2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@color";
	libcrtx_ui_commands_entry[j][i].stx = "@color [color]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes selected unit(s) color.";
	libcrtx_ui_commands_entry[j][i].use = "@color blue";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@face";
	libcrtx_ui_commands_entry[j][i].stx = "@face (+) (number) | @face";
	libcrtx_ui_commands_entry[j][i].nfo = "Selected unit(s) faces a certain angle.";
	libcrtx_ui_commands_entry[j][i].use = "@face +35 | @face 45 | @face (turns toward spawner or cursor)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@height";
	libcrtx_ui_commands_entry[j][i].stx = "@height (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Places selected unit at a different height.";
	libcrtx_ui_commands_entry[j][i].use = "@height 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@addweapon";
	libcrtx_ui_commands_entry[j][i].stx = "@addweapon (Weapon name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds a weapon to selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@addweapon marine";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@removeweapon";
	libcrtx_ui_commands_entry[j][i].stx = "@removeweapon (Weapon name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes a weapon from selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@removeweapon zealot";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@life";
	libcrtx_ui_commands_entry[j][i].stx = "@life {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the life value on a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@life 45 | @life 25% | @life +25 | @life +5%";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@energy";
	libcrtx_ui_commands_entry[j][i].stx = "@energy {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the energy value on a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@energy 45 | @energy 25% | @energy +25 | @energy +5%";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@shields";
	libcrtx_ui_commands_entry[j][i].stx = "@shields {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the shield value on a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@shields 45 | @shields 25% | @shields +25 | @shields +5%";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@maxlife";
	libcrtx_ui_commands_entry[j][i].stx = "@maxlife {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets or adds to the maximum life of the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@maxlife 300 OR @maxlife +35";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@maxenergy";
	libcrtx_ui_commands_entry[j][i].stx = "@maxenergy {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets or adds to the maximum energy of the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@maxenergy 99 OR @maxenergy +35";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@maxshields";
	libcrtx_ui_commands_entry[j][i].stx = "@maxshields {+}[fixed value]{%}";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets or adds to the maximum shields of the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@maxshields 355 OR @maxshields +35";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@speed";
	libcrtx_ui_commands_entry[j][i].stx = "@speed (+) (Number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Alters/adds the speed of a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@speed 50 OR @speed +2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@kills";
	libcrtx_ui_commands_entry[j][i].stx = "@kills (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the kill count of a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@kills 420";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@level";
	libcrtx_ui_commands_entry[j][i].stx = "@level (number)";
	libcrtx_ui_commands_entry[j][i].nfo = " Allows a unit to gain levels; the number sets the starting level.";
	libcrtx_ui_commands_entry[j][i].use = "@level 2";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@adddamage";
	libcrtx_ui_commands_entry[j][i].stx = "@adddamage (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds onto the existing damage of a unit's weapon/weapons.";
	libcrtx_ui_commands_entry[j][i].use = "@adddamage 50";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@removedamage";
	libcrtx_ui_commands_entry[j][i].stx = "@removedamage (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes damage from a unit's weapon/weapons.";
	libcrtx_ui_commands_entry[j][i].use = "@removedamage 50";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@attach";
	libcrtx_ui_commands_entry[j][i].stx = "@attach (actor name) (attach point)";
	libcrtx_ui_commands_entry[j][i].nfo = "Attaches an actor to a selected unit's specified attach point";
	libcrtx_ui_commands_entry[j][i].use = "@attach Zealot Weapon | @attach listpoints (to display a list of possible points)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@removearea";
	libcrtx_ui_commands_entry[j][i].stx = "@removearea (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes units within a certain radius from the cursor/spawner";
	libcrtx_ui_commands_entry[j][i].use = "@removearea 50";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@removebehavior";
	libcrtx_ui_commands_entry[j][i].stx = "@removebehavior [string behavior-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes a behavior from the selected unit(s).";
	libcrtx_ui_commands_entry[j][i].use = "@removebehavior critterwander";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@addbehavior";
	libcrtx_ui_commands_entry[j][i].stx = "@addbehavior [string behavior-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds a behavior to the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@addbehavior OdinDontDie";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@firstperson";
	libcrtx_ui_commands_entry[j][i].stx = "@firstperson";
	libcrtx_ui_commands_entry[j][i].nfo = "Activates the first person camera on the selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@firstperson";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@thirdperson";
	libcrtx_ui_commands_entry[j][i].stx = "@thirdperson";
	libcrtx_ui_commands_entry[j][i].nfo = "Activates the default 3rd person view camera";
	libcrtx_ui_commands_entry[j][i].use = "@thirdperson";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@sayoverhead";
	libcrtx_ui_commands_entry[j][i].stx = "@sayoverhead (text)";
	libcrtx_ui_commands_entry[j][i].nfo = "Briefly displays text over the selected unit(s) ";
	libcrtx_ui_commands_entry[j][i].use = "@sayoverhead TheChosenOne ([EZMode]lllllll) writes horrible command info";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@play";
	libcrtx_ui_commands_entry[j][i].stx = "@play [string anim-name] [int number-of-times]/{loop}";
	libcrtx_ui_commands_entry[j][i].nfo = "Plays a unit animation the specified number of times, or loops it indefinitely";
	libcrtx_ui_commands_entry[j][i].use = "@play dance loop";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@renameall";
	libcrtx_ui_commands_entry[j][i].stx = "@renameall (name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Renames all unit types of those selected to the name.";
	libcrtx_ui_commands_entry[j][i].use = "@renameall Soldier";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@behaviors";
	libcrtx_ui_commands_entry[j][i].stx = "@behaviors";
	libcrtx_ui_commands_entry[j][i].nfo = "Lists out active behaviors on the selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@behaviors";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@order";
	libcrtx_ui_commands_entry[j][i].stx = "@order [order] {#[region-name]}";
	libcrtx_ui_commands_entry[j][i].nfo = "Issues an order to selected unit(s), targeting the region specified (must have #)";
	libcrtx_ui_commands_entry[j][i].use = "@order attack #A";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@resources";
	libcrtx_ui_commands_entry[j][i].stx = "@resources (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Alters the number of resources on a resource node.";
	libcrtx_ui_commands_entry[j][i].use = "@resources 3000";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@liferegen";
	libcrtx_ui_commands_entry[j][i].stx = "@liferegen (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets a rate for health regeneration (HP/second)";
	libcrtx_ui_commands_entry[j][i].use = "@liferegen 25";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@energyregen";
	libcrtx_ui_commands_entry[j][i].stx = "@energyregen (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets a rate for energy regeneration (energy/second)";
	libcrtx_ui_commands_entry[j][i].use = "@energyregen 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@shieldsregen";
	libcrtx_ui_commands_entry[j][i].stx = "@shieldsregen (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets a rate for shield regeneration (shields/second)";
	libcrtx_ui_commands_entry[j][i].use = "@shieldsregen 50";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@copy";
	libcrtx_ui_commands_entry[j][i].stx = "@copy | @copy +visual";
	libcrtx_ui_commands_entry[j][i].nfo = "Copies statistics of the selected unit. (+visual copies the visuals)";
	libcrtx_ui_commands_entry[j][i].use = "@copy or @copy +visual";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@effect";
	libcrtx_ui_commands_entry[j][i].stx = "@effect (Name)";
	libcrtx_ui_commands_entry[j][i].nfo = "Applies the effect on the selected unit(s).";
	libcrtx_ui_commands_entry[j][i].use = "";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@radius";
	libcrtx_ui_commands_entry[j][i].stx = "@radius (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Alters the collision radius of a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@radius .5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@modelswap";
	libcrtx_ui_commands_entry[j][i].stx = "@modelswap [model-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Changes the model of a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@modelswap barracks";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@addrange";
	libcrtx_ui_commands_entry[j][i].stx = "@addrange [fixed amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Adds range to the weapons of the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@addrange 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@removerange";
	libcrtx_ui_commands_entry[j][i].stx = "@removerange [fixed amount]";
	libcrtx_ui_commands_entry[j][i].nfo = "Removes range to the weapons of the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@removerange";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@armor";
	libcrtx_ui_commands_entry[j][i].stx = "@armor (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the armor amount on a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@armor 12";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@shieldsarmor";
	libcrtx_ui_commands_entry[j][i].stx = "@shieldsarmor (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the shield armor amount on a selected unit.";
	libcrtx_ui_commands_entry[j][i].use = "@shieldsarmor 12";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@weaponspeed";
	libcrtx_ui_commands_entry[j][i].stx = "@weaponspeed (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the attack speed on a unit's weapons.";
	libcrtx_ui_commands_entry[j][i].use = "@weaponspeed 0.86";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@weaponspeedall";
	libcrtx_ui_commands_entry[j][i].stx = "@weaponspeedall (number)";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the attack speed for ALL weapons of a certain type.";
	libcrtx_ui_commands_entry[j][i].use = "@weaponspeedall 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@animspeed";
	libcrtx_ui_commands_entry[j][i].stx = "@animspeed [rate]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the rate animations play on selected unit(s) (the higher, the faster)";
	libcrtx_ui_commands_entry[j][i].use = "@animspeed .5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@rotate";
	libcrtx_ui_commands_entry[j][i].stx = "@rotate [yaw] [pitch] [roll]";
	libcrtx_ui_commands_entry[j][i].nfo = "Rotates the selected unit(s) to the specified parameteres (resets to default when moving)";
	libcrtx_ui_commands_entry[j][i].use = "@rotate 59 69 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@label";
	libcrtx_ui_commands_entry[j][i].stx = "@label [string text]";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a text label on the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@label This is a label";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@decal";
	libcrtx_ui_commands_entry[j][i].stx = "@decal [string decal-name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Sets the decal on the selected unit(s)";
	libcrtx_ui_commands_entry[j][i].use = "@decal decal_zerg_0054_01";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@setname";
	libcrtx_ui_commands_entry[j][i].stx = "@setname [string name]";
	libcrtx_ui_commands_entry[j][i].nfo = "Selected unit(s) takes on the specified name when using @say command";
	libcrtx_ui_commands_entry[j][i].use = "@setname Soldier";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@say";
	libcrtx_ui_commands_entry[j][i].stx = "@say [string statement]";
	libcrtx_ui_commands_entry[j][i].nfo = "Makes the unit say the typed statement in the Cortex chat";
	libcrtx_ui_commands_entry[j][i].use = "@say This is a statement";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@sayoverhead";
	libcrtx_ui_commands_entry[j][i].stx = "@sayoverhead [string statement]";
	libcrtx_ui_commands_entry[j][i].nfo = "Creates a text tag of the statement above a unit for a short period of time";
	libcrtx_ui_commands_entry[j][i].use = "@sayoverhead This is a statement";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@statbars";
	libcrtx_ui_commands_entry[j][i].stx = "@statbars {on||off}";
	libcrtx_ui_commands_entry[j][i].nfo = "Turns on or off the vital bars (healthbars, shields, energy) of a unit";
	libcrtx_ui_commands_entry[j][i].use = "@statbars off (just \"@statbars\" toggles the bars off)";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@form";
	libcrtx_ui_commands_entry[j][i].stx = "@form rect||circle||star ...";
	libcrtx_ui_commands_entry[j][i].nfo = "Experimental formation command";
	libcrtx_ui_commands_entry[j][i].use = "@form rect 3 10 .5 45";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@squad";
	libcrtx_ui_commands_entry[j][i].stx = "@squad {fluid||dynamic||static||break}";
	libcrtx_ui_commands_entry[j][i].nfo = "Forms or breaks a unit squad of the selected units (dynamic is default)";
	libcrtx_ui_commands_entry[j][i].use = "@squad | @squad static | @squad break";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@subtitle";
	libcrtx_ui_commands_entry[j][i].stx = "@subtitle [text]";
	libcrtx_ui_commands_entry[j][i].nfo = "Add a subtitle to the unit";
	libcrtx_ui_commands_entry[j][i].use = "@subtitle this is a subtitle";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@cache";
	libcrtx_ui_commands_entry[j][i].stx = "@cache | @cache [int number]";
	libcrtx_ui_commands_entry[j][i].nfo = "Views the number of command cache a unit has, or views a command cache";
	libcrtx_ui_commands_entry[j][i].use = "@cache | @cache 5";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@undo";
	libcrtx_ui_commands_entry[j][i].stx = "@undo [int iterations]";
	libcrtx_ui_commands_entry[j][i].nfo = "Undos a number of commands (mostly visual commands) applied to the unit";
	libcrtx_ui_commands_entry[j][i].use = "@undo 4";
	i += 1;
	libcrtx_ui_commands_entry[j][i].cmd = "@attach+";
	libcrtx_ui_commands_entry[j][i].stx = "@attach+ {-m} [Actor/Model] [Point_#] [offX] [offY] [offZ] {{-r} [rotX] [rotY] [rotZ]} [SOp1] [SOp2] [SOp3]...";
	libcrtx_ui_commands_entry[j][i].nfo = "A more specialized attach command";
	libcrtx_ui_commands_entry[j][i].use = "@attach+ marine origin 2 2 3  |  @attach+ marine origin 0 0 2 -r 90 180 55";

	//9 - fRPG commands
	//j = 9;
	//i = 1;
	//libcrtx_ui_commands_entry[9][i].cmd = "%item";
	//libcrtx_ui_commands_entry[j][i].stx = "";
	//libcrtx_ui_commands_entry[j][i].nfo = "Experimental command";
	//libcrtx_ui_commands_entry[j][i].use = "";
	//i += 1;

}


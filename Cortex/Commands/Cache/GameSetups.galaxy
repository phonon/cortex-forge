// Cortex Forge Extensions
// By Xethyr (407)
//
// Copyright (C) 2013
//
// Cortex Engine by Motive
// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2011 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bank[libcrtx_max_players] libcrtx_gameSetup_bank;

//const int libcrtx_unit_load_recursion_limit = 50;

//bank architecture:
//"SETUPNAME_global" : stores flag, stores initialization commands, regions, teleports, cameras
//"SETUPNAME_unit" : stores units and their caches
//UNITNUMBER.0 (store unit stats) : 1.unit_type 2.posX 3.posY 4. facing 5.hp 6.hp_max 7.hp_regen 8.shields 9.shields_max 10.shields_regen 11.energy 12.energy_max 13.energy_regen 14.speed 15.kills 16.level 17.experience
//"SETUPNAME_actor" : stores doodads (FUCK, HOW DO I EVEN DO THIS)

void libcrtx_gameSetup_bank_init()
{
	int i = 1;
	
	while( i < libcrtx_max_players ) {
		if(PlayerStatus(i) == c_playerStatusActive) {
			libcrtx_gameSetup_bank[i] = BankLoad("CortexSetup", i);
		}
		i += 1;
	}
	
}
void libcrtx_gamesetup_load(int player, string gamesetup_name)
{
	int i;
	int index;
	int unit_id;
	string unit_properties;
	string bank_id;
	unitgroup g;

	//turn on loading flag
	libcrtx_gamesetup_isLoading[player] = true;
	
	//load global
	//i = BankKeyCount(libcrtx_gameSetup_bank[player], gamesetup_name + "_global")
	
	
	//load units
	i = BankKeyCount(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit") - 1;
	while(i >= 0) {
		if(StringContains(BankKeyName(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", i), ".0", c_stringEnd, c_stringNoCase)) {
			bank_id = StringSub(BankKeyName(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", i), 1, StringLength(BankKeyName(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", i)) - 2);
			unit_properties = BankValueGetAsString(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", BankKeyName(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", i));
			unit_id = libcrtx_unitCache_next_free_id();
			
			//create unit
			UnitCreate(1, StringWord(unit_properties, 1), c_unitCreateIgnorePlacement, player, Point(StringToFixed(StringWord(unit_properties, 2)), StringToFixed(StringWord(unit_properties, 3))), 270.0);
			UnitSetFacing(UnitLastCreated(), StringToFixed(StringWord(unit_properties, 4)), 0);
			UnitSetCustomValue(UnitLastCreated(), 11, IntToFixed(unit_id)); //sets unit id
			DataTableSetBool(true, IntToString(unit_id) + ".unit", true);
			UnitSetCustomValue(UnitLastCreated(), 12, 1); //set the unit cache value
			UnitSetCustomValue(UnitLastCreated(), 16, 0); //set the modelswap flag to 0
			
			//set properties
			index = 5;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsRegen, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyRegen, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, StringToFixed(StringWord(unit_properties, index)));
			index += 1;
			UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, StringToFixed(StringWord(unit_properties, index)));

			//now parse commands for unit
			index = 1;
			g = UnitGroupEmpty();
			UnitGroupAdd(g, UnitLastCreated());
			libcrtx_chat_set_context(player, g);
			while(BankKeyExists(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", bank_id + "." + IntToString(index))) {
				libcrtx_chat_parsechat(player, BankValueGetAsString(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", bank_id + "." + IntToString(index)), libcrtx_chat_recursion_limit);		
				index += 1;
			}
		}
		i -= 1;
	}

	//load actor
	//i = BankKeyCount(libcrtx_gameSetup_bank[player], gamesetup_name + "_actor")
	
	//loading complete!
	libcrtx_gamesetup_isLoading[player] = false;
	libcrtx_write_success("Game setup loaded: \"" + gamesetup_name + "\"");
	
}
void libcrtx_gamesetup_save(int player, string gamesetup_name, region rgn)
{
	unitgroup g;
	string unit_id;
	string unit_properties;
	int i;
	
	//check if gamesetup of the same name exists:
	if(BankSectionExists(libcrtx_gameSetup_bank[player], gamesetup_name + "_global")) {
		//it exists: first delete all previous gamesetup sections
		BankSectionRemove(libcrtx_gameSetup_bank[player], gamesetup_name + "_global");
		if(BankSectionExists(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit")) {
			BankSectionRemove(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit");	
		}
		if(BankSectionExists(libcrtx_gameSetup_bank[player], gamesetup_name + "_actor")) {
			BankSectionRemove(libcrtx_gameSetup_bank[player], gamesetup_name + "_actor");	
		}
		BankSave(libcrtx_gameSetup_bank[player]);
	}
	
	//set global things
	BankValueSetFromFlag(libcrtx_gameSetup_bank[player], gamesetup_name + "_global", "setup", true);
	
	//save units
	g = UnitGroup(null, player, rgn, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
	
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if(UnitGetType(UnitGroupLoopCurrent()) == libcrtx_getspawnertype()) { //dont save spawner
			UnitGroupLoopStep();
			continue;
		}
		
		unit_id = FixedToString(UnitGetCustomValue(UnitGroupLoopCurrent(), 11), 0);
		
		//create the unit properties string
		unit_properties = "";
		//unit type
		unit_properties += UnitGetType(UnitGroupLoopCurrent());
		//position
		unit_properties += " " + FixedToString(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), 4);
		unit_properties += " " + FixedToString(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), 4);
		unit_properties += " " + FixedToString(UnitGetFacing(UnitGroupLoopCurrent()), 2);		
		//hp, shields, energy
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeRegen, true), 3);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsMax, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsRegen, true), 3);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyMax, true), 0);
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyRegen, true), 3);
		//speed
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, true), 3);
		//kills
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropKills, true), 0);
		//level
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLevel, true), 0);
		//experience
		unit_properties += " " + FixedToString(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, true), 3);

		BankValueSetFromString(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", unit_id + ".0", unit_properties);
		
		//create the unit caches
		i = 1;
		while(DataTableValueExists(true, unit_id + "." + IntToString(i))) {
			BankValueSetFromString(libcrtx_gameSetup_bank[player], gamesetup_name + "_unit", unit_id + "." + IntToString(i), DataTableGetString(true, unit_id + "." + IntToString(i)));
			i += 1;
		}
		
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	//finally, save bank
	BankSave(libcrtx_gameSetup_bank[player]);
	
	libcrtx_write_success("Game setup saved as \"" + gamesetup_name + "\"");
}

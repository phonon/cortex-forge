// Cortex Forge Extensions// By Xethyr (407)//// Copyright (C) 2013//// Cortex Engine by Motive// Cortex SC2 Roleplaying Engine// Copyright (C) 2009-2011 <http://www.cortexrp.com/>//// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation; version 2 of the License.// // This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//camera create [name]//camera remove [name]//camera view Acamerainfo[libcrtx_max_players] cam;void libcrtx_camera_reset (int player);void libcrtx_camera_init() {	int i = 1;	fixed val;		while( i < libcrtx_max_players ) {		if(PlayerStatus(i) == c_playerStatusActive) {			cam[i] = CameraInfoDefault();			libcrtx_camera_reset(i);		}		i += 1;	}}void libcrtx_camera_create (int player, string camName){	CameraInfoSetValue(cam[player], c_cameraValuePitch, CameraGetPitch(player));	CameraInfoSetValue(cam[player], c_cameraValueYaw, CameraGetYaw(player));		//syntax: "cam 1 name": e.x. cam 1 thisisacamera	//CameraInfoSetTarget(cam[player], CameraGetTarget(player));	DataTableSetCameraInfo(true, "cam " + IntToString(player) + " " + camName, cam[player]);	DataTableSetPoint(true, "cam_pnt " + IntToString(player) + " " + camName, CameraGetTarget(player));		libcrtx_write_success("Camera " + camName + " has been created with current view.");}void libcrtx_camera_remove (int player, string camName){	if(DataTableValueExists(true, "cam " + IntToString(player) + " " + camName)) {		DataTableValueRemove(true, "cam " + IntToString(player) + " " + camName);		DataTableValueRemove(true, "cam_pnt " + IntToString(player) + " " + camName);		libcrtx_write_success("Camera " + camName + " has been deleted.");	}	else {		libcrtx_write_error("Camera " + camName + " does not exist.");	}}void libcrtx_camera_removeall (int player){	int count = 1;	int camCount = 0;	string s;		while(count <= DataTableValueCount(true)) {		s = DataTableValueName(true, count);		if((StringWord(s, 1) == "cam" && StringToInt(StringWord(s, 2)) == player) || (StringWord(s, 1) == "cam_pnt" && StringToInt(StringWord(s, 2)) == player))		{			DataTableValueRemove(true, DataTableValueName(true, count));			camCount += 1;		}		count += 1;	}		if(camCount == 0) {		libcrtx_write(PlayerGroupSingle(player), "You have no cameras.");		}	else {		libcrtx_write_success("All your cameras have been deleted.");	}}void libcrtx_camera_list (int player){	int count = 1;	int camCount = 0;	string camList;		while(count <= DataTableValueCount(true)) {		if(StringWord(DataTableValueName(true, count), 1) == "cam" && StringToInt(StringWord(DataTableValueName(true, count), 2)) == player) {			if(camCount == 0) {				camList = StringWord(DataTableValueName(true, count), 3);			}			else {				camList = camList + ", " + StringWord(DataTableValueName(true, count), 3);			}			camCount += 1;		}		count += 1;	}		if(camCount > 0) {		libcrtx_write(PlayerGroupSingle(player), "Cameras:</n>" + camList);	}	else {		libcrtx_write(PlayerGroupSingle(player), "You have no cameras.");	}}void libcrtx_camera_view (int player, string camName, fixed time){	camerainfo camSet;		if(!DataTableValueExists(true, "cam " + IntToString(player) + " " + camName)) {		libcrtx_write_error("Camera " + camName + " does not exist.");		return;	}	camSet = DataTableGetCameraInfo(true, "cam " + IntToString(player) + " " + camName);	CameraInfoSetTarget(camSet, DataTableGetPoint(true, "cam_pnt " + IntToString(player) + " " + camName));		CameraApplyInfo(player, camSet, time, -1, 10.0, true);	libcrtx_write(PlayerGroupSingle(player), "Setting view to camera " + camName);}void libcrtx_camera_reset (int player){	fixed val;			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[5]", player));	CameraInfoSetValue(cam[player], c_cameraValuePitch, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[9]", player));	CameraInfoSetValue(cam[player], c_cameraValueDepthOfField, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[4]", player));	CameraInfoSetValue(cam[player], c_cameraValueDistance, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[12]", player));	CameraInfoSetValue(cam[player], c_cameraValueFalloffEnd, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[11]", player));	CameraInfoSetValue(cam[player], c_cameraValueFalloffStart, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[2]", player));	CameraInfoSetValue(cam[player], c_cameraValueFarClip, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[0]", player));	CameraInfoSetValue(cam[player], c_cameraValueFieldOfView, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[10]", player));	CameraInfoSetValue(cam[player], c_cameraValueFocalDepth, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[8]", player));	CameraInfoSetValue(cam[player], c_cameraValueHeightOffset, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[1]", player));	CameraInfoSetValue(cam[player], c_cameraValueNearClip, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[7]", player));	CameraInfoSetValue(cam[player], c_cameraValueRoll, val);		val = IntToFixed(90);	CameraInfoSetValue(cam[player], c_cameraValueYaw, val);		val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", player), "ParamInitial[3]", player));	CameraInfoSetValue(cam[player], c_cameraValueShadowClip, val);}bool libcrtx_command_camera (bool checkConds, bool runActions){	string s;	string paremVal;	fixed time;	fixed val;		const string cameraProperties = "AngleOfAttack, DepthOfField, Distance, FalloffEnd, FalloffStart, FarClip, FieldOfView, FocalDepth, HeightOffset, NearClip, Roll, Rotation, ShadowClip";		s = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );	paremVal = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3);	if(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 4) == "" || StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 4)) < 0) {		time = 1.0;	}	else {		time = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 4));	}		if(s == "") {		return true;	}		if(StringEqual(s, "create", false) && paremVal != "") {		libcrtx_camera_create(EventPlayer(), paremVal);		return true;	}	if(StringEqual(s, "remove", false) && paremVal != "") {		libcrtx_camera_remove(EventPlayer(), paremVal);		return true;			}	if(StringEqual(s, "removeall", false)) {		libcrtx_camera_removeall(EventPlayer());		return true;	}	if(StringEqual(s, "list", false)) {		libcrtx_camera_list(EventPlayer());		return true;	}	if(StringEqual(s, "view", false) && paremVal != "") {		libcrtx_camera_view(EventPlayer(), paremVal, time);		return true;	}		if(StringEqual(s, "properties", false)) {		libcrtx_write(PlayerGroupSingle(EventPlayer()), "<c val=\"00ff00\">Camera properties:</c><n/>" + cameraProperties);		return true;	}	if(StringEqual(s, "reset", false)) {		libcrtx_write(PlayerGroupSingle(EventPlayer()), "Camera resetting to default parameters.");			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[5]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValuePitch, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[9]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[4]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueDistance, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[12]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueFalloffEnd, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[11]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueFalloffStart, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[2]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueFarClip, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[0]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[10]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueFocalDepth, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[8]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueHeightOffset, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[1]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueNearClip, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[7]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueRoll, val, 1.0, -1, 10);			val = 90;		CameraSetValue(EventPlayer(), c_cameraValueYaw, val, 1.0, -1, 10);			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[3]", EventPlayer()));		CameraSetValue(EventPlayer(), c_cameraValueShadowClip, val, 1.0, -1, 10);		cam[EventPlayer()] = CameraInfoDefault();		libcrtx_camera_reset(EventPlayer());				return true;	}	if(StringEqual(s, "AngleOfAttack", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[5]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValuePitch, val);		CameraSetValue(EventPlayer(), c_cameraValuePitch, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "DepthOfField", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[9]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueDepthOfField, val);		CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "Distance", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[4]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueDistance, val);		CameraSetValue(EventPlayer(), c_cameraValueDistance, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "FalloffEnd", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[12]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueFalloffEnd, val);		CameraSetValue(EventPlayer(), c_cameraValueFalloffEnd, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "FalloffStart", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[11]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueFalloffStart, val);		CameraSetValue(EventPlayer(), c_cameraValueFalloffStart, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "FarClip", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[2]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueFarClip, val);		CameraSetValue(EventPlayer(), c_cameraValueFarClip, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "FieldOfView", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[0]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueFieldOfView, val);		CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "FocalDepth", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[10]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueFocalDepth, val);		CameraSetValue(EventPlayer(), c_cameraValueFocalDepth, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "HeightOffset", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[8]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueHeightOffset, val);		CameraSetValue(EventPlayer(), c_cameraValueHeightOffset, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "NearClip", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[1]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueNearClip, val);		CameraSetValue(EventPlayer(), c_cameraValueNearClip, val, time, -1, 10);		return true;	}		else if(StringEqual(s, "Roll", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[7]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueRoll, val);		CameraSetValue(EventPlayer(), c_cameraValueRoll, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "Rotation", false) ) {		if(paremVal == "") {			val = IntToFixed(90);		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueYaw, val);		CameraSetValue(EventPlayer(), c_cameraValueYaw, val, time, -1, 10);		return true;	}	else if(StringEqual(s, "ShadowClip", false) ) {		if(paremVal == "") {			val = StringToFixed(CatalogFieldValueGet(c_gameCatalogCamera, CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Camera", EventPlayer()), "ParamInitial[3]", EventPlayer()));		}		else {			val = StringToFixed(paremVal);		}		CameraInfoSetValue(cam[EventPlayer()], c_cameraValueShadowClip, val);		CameraSetValue(EventPlayer(), c_cameraValueShadowClip, val, time, -1, 10);		return true;	}	else {		libcrtx_write(PlayerGroupSingle(EventPlayer()), "<c val=\"ff0000\">Error</c>: Invalid camera property.<n/>You can obtain a list of camera properties by typing <c val=\"00ff00\">camera properties</c>.");		return true;	}	return true;}
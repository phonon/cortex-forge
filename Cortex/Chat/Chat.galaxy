// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2011 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

string[libcrtx_max_players] libcrtx_chat_current_msg;
bank[libcrtx_max_players] libcrtx_alias_banks;
string libcrtx_command_list;

void libcrtx_command_create(string lp_cmd, string lp_func) 
{
	trigger t = TriggerCreate(lp_func);
	if(t == null) {
		TriggerDebugOutput(1, StringToText("Failed to register command: " + lp_cmd + " => " + lp_func), true);
	}
	DataTableSetTrigger( true, "libcrtx_commands_" + lp_cmd, t );
	libcrtx_command_list = libcrtx_command_list + lp_cmd + ", ";
}

bool libcrtx_alias_exists(string aliasName)
{
	string s;
	
	s = BankValueGetAsString( libcrtx_alias_banks[EventPlayer()], "aliases", aliasName );
	if( s == "" ) {
		return false;
	}
	return true;
}

// lists all aliases in comma and space-deliminted format
string libcrtx_alias_list()
{
	int count;
	string current;
	string rvalue;

	count = BankKeyCount( libcrtx_alias_banks[EventPlayer()], "aliases" );
	if( count == 0 ) {
		return "You have no aliases.";
	}

	while(count > 0) {
		current = BankKeyName( libcrtx_alias_banks[EventPlayer()], "aliases", count-1 );
		rvalue = rvalue + current;
		
		if( count != 1 ) { // Last one doesn't need a comma
			rvalue = rvalue + ", ";
		}

		count = count - 1;
	}

	return rvalue;
}
// lists all aliases in alphabetized comma and space-deliminted format
string libcrtx_alias_list_alphabetized()
{
	int count;
	int i;
	string current;
	string rvalue = "";
	string temp;

	count = BankKeyCount( libcrtx_alias_banks[EventPlayer()], "aliases" );
	if( count == 0 ) {
		return "You have no aliases.";
	}
	
	while(count > 0) {
		current = BankKeyName( libcrtx_alias_banks[EventPlayer()], "aliases", count-1 );
		rvalue = rvalue + current;
		
		if( count != 1 ) { // No commas until after alphabatizing
			rvalue = rvalue + " ";
		}

		count = count - 1;
	}
	
	//alphabetizes the alias string
	count = 1;
	while(StringWord(rvalue, count + 1) != "") {
		count += 1;
	}
	while(count > 1) {
		i = 1;
		while(count - i > 0) {
			if(libcrtx_string_compare(StringWord(rvalue, count), StringWord(rvalue, count - i)) == 2 ) {
				temp = StringWord(rvalue, count);
				rvalue = StringReplace( rvalue, StringWord(rvalue, count - i), StringFind(rvalue, StringWord(rvalue, count), true), StringFind(rvalue, StringWord(rvalue, count), true) + StringLength(StringWord(rvalue, count)) - 1);
				rvalue = StringReplace( rvalue, temp, StringFind(rvalue, StringWord(rvalue, count - i), true), StringFind(rvalue, StringWord(rvalue, count - i), true) + StringLength(StringWord(rvalue, count - i)) - 1);
				break;
			}
			i += 1;
			if(count - i == 0) {
				count -= 1;
			}
		}
	}

	count = 1;
	while(StringWord(rvalue, count + 1) != "") {
		count += 1;
	}
	i = 1;
	while(i < count) {
		if( i != count ) { // Last one doesnt need comma
			rvalue = StringReplace( rvalue, StringWord(rvalue, i) + ",", StringFind(rvalue, StringWord(rvalue, i), true), StringFind(rvalue, StringWord(rvalue, i), true) + StringLength(StringWord(rvalue, i)) - 1);
		}
		i += 1;
	}
	
	return rvalue;
}
void libcrtx_alias_destroyall()
{
	BankSectionRemove( libcrtx_alias_banks[EventPlayer()], "aliases" );
	BankSave( libcrtx_alias_banks[EventPlayer()] );
}

void libcrtx_alias_destroy(string aliasName)
{
	BankKeyRemove( libcrtx_alias_banks[EventPlayer()], "aliases", aliasName );
	BankSave( libcrtx_alias_banks[EventPlayer()] );
}

void libcrtx_alias_create(string aliasName, string realName)
{
	// bank will be created since alias create is a command that must be checked in advance.
	BankValueSetFromString( libcrtx_alias_banks[EventPlayer()], "aliases", aliasName, realName );
	BankSave( libcrtx_alias_banks[EventPlayer()] );
}

string libcrtx_alias_getsource(string aliasName)
{
	return BankValueGetAsString( libcrtx_alias_banks[EventPlayer()], "aliases", aliasName );
}

void libcrtx_chat_write_ooc(int player, string message)
{
	string str;
	text msg = StringToText("Anonymous (OOC)");
	
	//if the msg is "sage", print newline
	if(StringEqual(message, "sage", c_stringCase)) {
		libcrtx_write_text(PlayerGroupAll(), StringToText("<n/>"));
		return;
	}
	
	if( !libcrtx_cortexid_has_playerflag(player, c_cortexIdPlayerFlagPrefersAnon) ) {
		msg = libcrtx_color_text_by_player( player, StringToText("<d Player=\"" + IntToString(player) + "\" GameValue=\"PlayerClanTag\"/> ") + PlayerName( player ) + StringToText(" (OOC)") );
	}
	
	//check message for ">" to greentext it
	if(StringContains(message, ">", c_stringBegin, true)) {
		str = ": " + "<c val=\"8FC547\">" + message + "</c>";
	}
	else {
		str = ": " + message;
	}
	msg = msg + StringToText(str);

	// And now we write the pretty OOC chat!
	libcrtx_write_text(PlayerGroupAll(), msg);
}

// Filters out instances of chat such as <c val="ff0000">, <h/>, <n/>, <img />, <s /> , etc.
bool libcrtx_chat_contains_illegal_xml(string message)
{
	if( StringContains( message, "<c ", c_stringAnywhere, false ) ) {
		return true;
	} else if( StringContains( message, "<c>", c_stringAnywhere, false ) ) {
		return true;
	} else if( StringContains(message, "<h", c_stringAnywhere, false ) ) {
		return true;
	} else if( StringContains(message, "<n", c_stringAnywhere, false ) ) {
		return true;
	} else if( StringContains(message, "<img", c_stringAnywhere, false ) ) {
		return true;
	} else if( StringContains(message, "<s", c_stringAnywhere, false ) ) {
		return true;
	}

	return false;
}

include "Cortex/Chat/ChatParser.galaxy"
include "Cortex/Chat/ChatHandler.galaxy"

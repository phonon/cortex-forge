//======================TEMP=================================================
int libcrtx_stringChar_to_int(string s)
{
	int i = 1;
	const string chars = "a b c d e f g h i j k l m n o p q r s t u v w x y z";
	
	while(StringWord(chars, i) != "") {
		if(StringEqual(s, StringWord(chars, i), false)) {
			return i;
		}
		i += 1;
	}
	
	return 0;
}
//string equal: return 0
//"d" > "a", "b" < "e", "." < "e", "a" = "A", etc...
//s1 > s2: return 1
//s2 > s1: return 2.
int libcrtx_string_compare(string s1, string s2)
{
	int charInt1;
	int charInt2;
	int x = 1;
	
	while(StringSub(s1, x, x) != "" && StringSub(s2, x, x) != "") {
		charInt1 = libcrtx_stringChar_to_int(StringSub(s1, x, x));
		charInt2 = libcrtx_stringChar_to_int(StringSub(s2, x, x));
		
		if(charInt1 > charInt2) {
			return 1;
		}
		if(charInt2 > charInt1) {
			return 2;
		}
		
		x += 1;
	}

	if(StringSub(s1, x, x) != "" && StringSub(s2, x, x) == "") {
		return 1;
	}
	if(StringSub(s1, x, x) == "" && StringSub(s2, x, x) != "") {
		return 2;
	}
	
	return 0;
}
//==========================================================================
// lists all aliases in comma and space-deliminted format
string libcrtx_alias_list()
{
	int count;
	int i;
	string current;
	string rvalue;
	string temp;

	count = BankKeyCount( libcrtx_alias_banks[EventPlayer()], "aliases" );
	if( count == 0 ) {
		return "You have no aliases.";
	}
	
	while(count > 0) {
		current = BankKeyName( libcrtx_alias_banks[EventPlayer()], "aliases", count-1 );
		rvalue = rvalue + current;
		
		if( count != 1 ) { // No commas until after alphabatizing
			rvalue = rvalue + " ";
		}

		count -= 1;
	}
	
	//alphabetizes the alias string
	count = 1;
	while(StringWord(rvalue, count + 1) != "") {
		count += 1;
	}
	while(count > 1) {
		i = 1;
		while(count - i > 0) {
			if(libcrtx_string_compare(StringWord(rvalue, count), StringWord(rvalue, count - i)) == 2 ) {
				temp = StringWord(rvalue, count);
				rvalue = StringReplace( rvalue, StringWord(rvalue, count - i), StringFind(rvalue, StringWord(rvalue, count), true), StringFind(rvalue, StringWord(rvalue, count), true) + StringLength(StringWord(rvalue, count)) - 1);
				rvalue = StringReplace( rvalue, temp, StringFind(rvalue, StringWord(rvalue, count - i), true), StringFind(rvalue, StringWord(rvalue, count - i), true) + StringLength(StringWord(rvalue, count - i)) - 1);
				break;
			}
			i += 1;
			if(count - i == 0) {
				count -= 1;
			}
		}
	}

	count = 1;
	while(StringWord(rvalue, count + 1) != "") {
		count += 1;
	}
	i = 1;
	while(i < count) {
		if( i != count ) { // Last one doesnt need comma
			rvalue = StringReplace( rvalue, StringWord(rvalue, i) + ",", StringFind(rvalue, StringWord(rvalue, i), true), StringFind(rvalue, StringWord(rvalue, i), true) + StringLength(StringWord(rvalue, i)) - 1);
		}
		i += 1;
	}
	
	return rvalue;
}